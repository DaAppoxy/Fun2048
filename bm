#!/bin/env python3
# Better make (it's not better btw, i'm sure just don't know enough about make)
from os import listdir, path, stat, system, makedirs, getcwd, environ
from subprocess import check_output
from sys import argv
from json import load, dump
import shlex
from shutil import copyfile
import platform

FLAG_DEBUG = 1
VERBOSE = True
CC = "g++"
SRC_PATH = "src"
CFLAGS = f"-I {SRC_PATH} -I include -g -Werror=switch-enum" + ("" if not FLAG_DEBUG else " -D DEBUG")
LFLAGS = "-lraylib -lGL -lm -lpthread -ldl -lrt -lX11"
OBJ_PATH = "temp"
BIN = "./bin/fun2048"
CONFIG = "config/bm.json"
BIN_FLAGS = ""
EXT = ".cpp" # extension to filter files that should be compiled

if platform.system() == "Windows":
	for k in globals():
		if isinstance(globals()[k], str):
			globals()[k] = globals()[k].replace('/', '\\')

def rls(path_, filter = lambda x: True):
	if not path_ in listdir():
		print(f"Please create a folder {repr(path_)}. This is normal behavior, this is a fail safe.")
		quit(1)
	for target in listdir(path_):
		target = f"{path_}/{target}"
		if path.isdir(target):
			for ret in rls(target, filter):
				yield ret
		else:
			if filter(target):
				yield target
def last_ch(path: str):
	return stat(path).st_mtime
def load_opt():
	global opt
	try:
		with open(CONFIG, "r") as f:
			opt = load(f)
	except FileNotFoundError:
		print("[bm] Failed to open options.")
		with open(CONFIG, "w") as f:
			f.write("{}")
		opt = {}
def save_opt():
	global opt
	if argv[0] == "bm":
		return
	if not path.exists(folder := CONFIG.rsplit("/", 1)[0]):
		makedirs(folder)
	with open(CONFIG, "w") as f:
		dump(opt, f)
def yeet(code: int):
	if argv[0] != "bm":
		save_opt()
	quit(code)
def fixmissing_files_opt():
	for path_ in rls(
		SRC_PATH,
		lambda p:
			p.endswith(EXT)
		and p not in opt
	):
		# Iter through all source .c files and check if there are any missing in the options
		if path_ not in opt:
			opt[path_] = last_ch(path_)
def compile_all(check_ch_time = True, cflags = ""):
	for path_ in rls(
		SRC_PATH,
		lambda p:
			p.endswith(EXT)
	):
		# Iter through all source .c files
		if (not check_ch_time) or opt[path_] < last_ch(path_):
			compile_to_obj(path_, cflags)
def compile_to_obj(p: str, cflags=""):
	""" cflags are additional flags to the setting CFLAGS """
	out_path = f"{OBJ_PATH}/{path.basename(p)}"[:-len(EXT)] + '.o'
	if code := shell(f"{CC} -c {p} -o {out_path} {CFLAGS} {cflags}"):
		yeet(code)
	else:
		opt[p] = last_ch(p)
def link_all(cflags = ""):
	""" cflags are additional flags to the setting CFLAGS """
	if len(listdir(OBJ_PATH)) == 0:
		shell("./bm all")
		load_opt()
		fixmissing_files_opt()
	j = " ".join(rls(OBJ_PATH, lambda x: x[-2:] == ".o"))
	if not j:
		raise Exception("Wtf ???")
	if code := shell(f"{CC} {j} -o {BIN} {CFLAGS} {cflags} {LFLAGS}"):
		yeet(code)
def run_example():
	if code := shell(f"{BIN} {BIN_FLAGS}"):
		yeet(code)
def debugging(tool: str):
	match tool:
		case "valgrind" | "mem" | "v":
			if code := shell(f"valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes -s -- {BIN} {BIN_FLAGS}"):
				yeet(code)
		# add more tools here
		case _:
			if code := shell(f"gdb {BIN}"):
				yeet(code)

if VERBOSE:
	def shell(cmd: str) -> int:
		print(cmd)
		system(cmd)
else:
	shell = system

def main(argv):
	if len(argv) == 1:
		compile_all(cflags="-O0") # Avoid any optimization for a simple test run
		link_all()
		run_example()
		yeet(0)
	match argv[1]:
		# Local features:
		case "all":
			compile_all(check_ch_time=False, cflags="-O0")
			yeet(0)
		case "production":
			compile_all(check_ch_time=False, cflags="-O3")
			link_all()
			yeet(0)
		case "dbg" | "gdb" | "debug" | "d":
			link_all(cflags="-O0")
			# run_example()
			debugging("" if len(argv) == 2 else argv[2])
			yeet(0)
		# Global features:
		case "copy":
			copyfile(__file__, "./bm")
			quit(0)
		case "import":
			print("Coming soon...")
			quit(0)
		case "pushglob":
			# Push changes made to this file in local to the global bm
			copyfile(__file__, f"{environ['BM_SOURCE']}/bm")
			quit(0)
		case _:
			print("Syntax: bm [arg]")
			print("\targ can either be 'all', 'debug', 'copy', 'production', ...")


if __name__ == "__main__":
	if len(argv) != 2 or argv[1] != "copy":
		load_opt()
		fixmissing_files_opt()
	if len(opt) == 0 and argv[1] not in ("copy", "all"): 
		print("First run =>")
		shell("./bm all")
	main(argv)

